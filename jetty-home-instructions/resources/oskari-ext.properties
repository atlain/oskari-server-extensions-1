
##################################
# Environment config
##################################

# change to match your database connection parameters
db.url=jdbc:postgresql://localhost:5432/oskaridb
db.username=*user*
db.password=*pass*

# set development to false or comment it out to load using minified javascript
development=false
oskari.client.version=dist/1.26

# Logger implementation - SystemLogger logs into System.out/err, replace with logging implementation of your choice
#oskari.logger=fi.nls.oskari.log.SystemLogger
oskari.logger=fi.nls.oskari.utils.Slf4JLogger

# this is used as baseurl for published maps (external url)
oskari.domain=http://localhost:8080
#oskari.domain=http://54.75.147.57

# path for incoming calls to access map
oskari.map.url=/

# url path to call for ajax requests/action routes
oskari.ajax.url.prefix=/?

# redis
redis.hostname=localhost
redis.port=6379
redis.pool.size=10

# Supported locales, comma separated and default first
oskari.locales=en_US,fi_FI,sv_SE,es_ES

# Used by metadata flyout/CSW coverage scheduled task
service.metadata.url=http://localhost:8082/geonetwork

# Allow published maps to be loaded from these domains
view.published.usage.unrestrictedDomains = 54.216.109.137, 54.75.147.57, locationframework.eu, localhost

# "CMS content" files location
actionhandler.GetArticlesByTag.dir=/articlesByTag/

##################################
# ELF user handling
##################################
eu.elf.oskari.user.ConterraSecurityManagerUserService.url=*url*
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllCerts=true
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllHosts=true

# UserService implementation
oskari.user.service=eu.elf.oskari.user.ConterraSecurityManagerUserService

##################################
# Configurations specific to database content
##################################
# Used to configure a template view for publishing maps, defaults to view with id 1
view.template.publish=3

view.default.Guest=2
view.default.Admin=1
view.default.User=1
view.default.roles=sM_Administrator, User, Guest
oskari.user.role.admin=sM_Administrator

# bundles that are added on runtime to view if user has one of configured role
actionhandler.GetAppSetup.dynamic.bundles = admin-layerselector, admin-layerrights

# Linking dynamic bundles based on user roles
# Properties are named 'actionhandler.GetAppSetup.dynamic.[BUNDLE ID].roles'
#   with value as comma-separated list of role names that should be served the bundle
actionhandler.GetAppSetup.dynamic.bundle.admin-layerrights.roles = sM_Administrator
actionhandler.GetAppSetup.dynamic.bundle.admin-layerselector.roles = sM_Administrator

##################################
# Search channels configuration
##################################

# comma-separated list of id for search channel that will be used (defaulted to) if none are explicitly configured
#search.channels.default=OPENSTREETMAP_CHANNEL, ELFGEOLOCATOR_CHANNEL
search.channels.default=ELFGEOLOCATOR_CHANNEL,METADATA_CATALOGUE_CHANNEL

# comma-separated list of search channel ids to use (whitelist)
#search.channels=OPENSTREETMAP_CHANNEL, ELFGEOLOCATOR_CHANNEL
search.channels=ELFGEOLOCATOR_CHANNEL, METADATA_CATALOGUE_CHANNEL

# comma-separated list of search channel ids used by GetSearchResult
#actionhandler.GetSearchResult.channels=OPENSTREETMAP_CHANNEL, ELFGEOLOCATOR_CHANNEL
actionhandler.GetSearchResult.channels=ELFGEOLOCATOR_CHANNEL

# OpenStreetMap search channel settings
search.channel.OPENSTREETMAP_CHANNEL.service.url=http://nominatim.openstreetmap.org/search

#ELF GeoLocator channel settings
search.channel.ELFGEOLOCATOR_CHANNEL.service.url=http://54.247.101.37/elf/GeolocatorService
# Optinal setups to override base search templates - not filters
#search.channel.ELFGEOLOCATOR_CHANNEL.service.reversegeocode.template=?SERVICE=WFS&REQUEST=ReverseGeocode&LAT=_LATITUDE_&LON=_LONGITUDE_&LANGUAGE=_LANG_
#search.channel.ELFGEOLOCATOR_CHANNEL.service.getfeatureau.template=?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeatureInAu&NAME=_PLACE_HOLDER_&AU=_AU_HOLDER_&LANGUAGE=_LANG_
#search.channel.ELFGEOLOCATOR_CHANNEL.service.fuzzy.template=?SERVICE=WFS&VERSION=2.0.0&REQUEST=FuzzyNameSearch&LANGUAGE=_LANG_&NAME=
#search.channel.ELFGEOLOCATOR_CHANNEL.service.getfeature.template=?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=SI_LocationInstance&language=_LANG_&FILTER=

# Metadata catalogue channel config
search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.server=http://localhost
#search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.path=/geonetwork/srv/en/csw
search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.path=/geonetwork/srv/eng/csw
search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.queryParams=SERVICE=CSW&VERSION=2.0.2&request=GetDomain&PropertyName=
# List of fields to show in advanced form (values retrieved by GetDomain requests)
search.channel.METADATA_CATALOGUE_CHANNEL.fields=type,serviceType,Title,OrganisationName,Subject,TopicCategory,Language,ResourceLanguage
# isMulti means user can select multiple values ie. checkbox vs. dropdown
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.isMulti=true
# this means that if type has value 'service' add to the same filter operation any serviceType parameters as single AND-operation
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.dependencies=service|serviceType
# filter is the property to be used on filter operations
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.filter=gmd:hierarchyLevel
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.isMulti=true
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.filter=srv:serviceType
# shownIf is sent to client meaning this field is only shown if field 'type' has value 'service' selected, closely related to field.dependencies!
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.shownIf=[{"type":"service"}]
search.channel.METADATA_CATALOGUE_CHANNEL.field.Title.filter=gmd:title
search.channel.METADATA_CATALOGUE_CHANNEL.field.TopicCategory.filter=gmd:topicCategory
# fields without filterOp are treated as LIKE operations, filterOp param value is mapped in code to deegree operations
search.channel.METADATA_CATALOGUE_CHANNEL.field.Subject.filterOp=COMP_EQUAL
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.filterOp=COMP_EQUAL
# must match means that this will be a top level filter element added as AND-operations (where as most other fields are added as OR)
search.channel.METADATA_CATALOGUE_CHANNEL.field.Language.mustMatch=true
search.channel.METADATA_CATALOGUE_CHANNEL.field.ResourceLanguage.mustMatch=true

search.channel.METADATA_CATALOGUE_CHANNEL.image.url.fi=/geonetwork/srv/fin/resources.get.uuid?access=public&
search.channel.METADATA_CATALOGUE_CHANNEL.image.url.sv=/geonetwork/srv/swe/resources.get.uuid?access=public&
search.channel.METADATA_CATALOGUE_CHANNEL.image.url.en=/geonetwork/srv/eng/resources.get.uuid?access=public&
search.channel.METADATA_CATALOGUE_CHANNEL.fetchpage.url.fi=/geonetwork/srv/eng/csw?Request=GetRecordById&version=2.0.2&outputSchema=csw:IsoRecord&id=
search.channel.METADATA_CATALOGUE_CHANNEL.fetchpage.url.sv=/geonetwork/srv/eng/csw?Request=GetRecordById&version=2.0.2&outputSchema=csw:IsoRecord&id=
search.channel.METADATA_CATALOGUE_CHANNEL.fetchpage.url.en=/geonetwork/srv/eng/csw?Request=GetRecordById&version=2.0.2&outputSchema=csw:IsoRecord&id=

###################################
# License Manager details
###################################
search.channel.METADATA_CATALOGUE_CHANNEL.resultparser=eu.elf.oskari.search.MetadataCatalogueELFResultParser
search.channel.METADATA_CATALOGUE_CHANNEL.licenseUrlPrefix=*url*

actionhandler.ELFLicense.wpos.url=*url*
actionhandler.ELFLicense.wpos.user=*user*
actionhandler.ELFLicense.wpos.pass=*pass*
actionhandler.ELFLicense.wpos.soapUrl=*url*
actionhandler.ELFLicense.wpos.loginUrl=*url*

##############################
# Proxy services
##############################
oskari.proxyservices = print, wfsquery, myplacestile

oskari.proxy.print.url=http://localhost:8250/portti-map-imaging-0.0.1-SNAPSHOT/imaging/service/thumbnail/extent.jsonp
oskari.proxy.print.params=zoomLevel,coord,mapLayers,showMarker,forceCache,noSavedState,pageSize
oskari.proxy.print.header.Content-Type=application/json; charset=UTF-8

oskari.proxy.wfsquery.handler=fi.nls.oskari.service.WFSQueryProxyHandler
oskari.proxy.wfsquery.header.Content-Type=text/xml

oskari.proxy.myplacestile.url=http://localhost:8888/geoserver/wms?CQL_FILTER=
oskari.proxy.myplacestile.handler=fi.nls.oskari.proxy.MyPlacesProxyHandler
oskari.proxy.myplacestile.user=*user*
oskari.proxy.myplacestile.pass=*pass*

##############################
# Myplaces configuration
##############################

# My places query url
# MyPlacesBundleHandler.java, GeoServerProxyService.java
myplaces.ows.url=http://localhost:8888/geoserver/oskari/ows?
# MapFullHandler.java, MyPlacesHandler.java
myplaces.wms.url=http://localhost:8888/geoserver/oskari/wms?buffer=128&tiled=yes&tilesorigin=0,0&CQL_FILTER=
myplaces.user=*user*
myplaces.password=*pass*
# Base WFS layer id for myplaces (oskari_maplayer table)
# Find correct id layer later on when my_places wfs layer is inserted
myplaces.baselayer.id=1
# My places namespace
myplaces.xmlns=http://www.oskari.org
# My places namespace prefix
myplaces.xmlns.prefix=oskari

